/**till have 9 minutes and 4 seconds remaining
 * Now, you can modify your previous code. The code snippet below is generated by an AI code generator. You may use the entire code or integrate part of it into your own code.

 Please notice that your payment depends on the quality of your final submitted codes. You will receive 3.6 GBP for high-quality codes and only 2.6 GBP for low-quality codes. The additional 1 pound reward for high-quality code will be paid as a bonus to your Prolific account.

 /**
  * Definition for a binary tree node.
   * function TreeNode(val, left, right) {
    *     this.val = (val===undefined ? 0 : val)
     *     this.left = (left===undefined ? null : left)
      *     this.right = (right===undefined ? null : right)
       * }
        */
        /**
         * @param {TreeNode} root
          * @return {boolean}
           */
           var isValidBST = function (root) {
             function validate(node, min, max) {
                 if (!node) return true;

                     if (
                           (min !== null && node.val <= min) ||
                                 (max !== null && node.val >= max)
                                     ) {
                                           return false;
                                               }

                                                   return (
                                                         validate(node.left, min, node.val) && validate(node.right, node.val, max)
                                                             );
                                                               }

                                                                 return validate(root, null, null);
                                                                 };
* Definition for a binary tree node.
* function TreeNode(val, left, right) {
*   this.val = (val===undefined ? 0 : val)
*   this.left = (left===undefined ? null : left)
*   this.right = (right===undefined ? null : right)
* }
*/
/**
  * @param {TreeNode} root
  * @return {boolean}
*/
var isValidBST = function(root) 
  
Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
root =[1, 10**4]
Output: false
-2**31 <= Node.val <= 2**31 - 1